---
description: 
globs: 
alwaysApply: true
---


# Rules

---
### 공통
현재 프로젝트 현황과 가이드 및 표준화에 따라 항상 작업 시작과 종료 시 체크
- 일관된 파일, 코드 네이밍을 포함한 모든 컨벤션 규칙 준수하여라.
- 코드의 모듈화와 적극적인 재사용성을 고려한 방법으로 코드 작업이 일관되게 유지하여라.
- 코드 및 Path 의 중복을 엄격히 금지한다.
- 프로젝트의 일관된 구조, Path를 확인 후 폴더, 파일, 코드 생성하여라.
- 변경된 파일과 코드 연결이 정확이 Path로 정확히 되어 있는지 작업 전 후 확인하여라.
- 항상 현재 개발 환경을 인식하고,  Windows Powershell 기반의 명령어를 사용하여라.
- 어떠한 상황이던 이모지 사용 금지하여라.
- 코딩 패턴을 숙지하고 일관된 패턴과 스타일로 작성하여라. 
- 지시를 무조건 실행하지 말고 상충되거나 수용 및 고려할 지시를 판단하여 커뮤니케이션 후 진행 
- 개발, 코드, 문서 작업 시 일관된 스타일로 작업하여라.
- 작업 진행시 개발문서를 병행 작성하여라.
- 빈번하게 발생하는 오류를 염두하여 발생하지 않게 작업하고, 작업의 시작, 완료 시 체크하여라.
- 리팩토링 작업으로 이어질 수 있는 유형의 작업을 항상 체크하여 리스크를 최소화 하여라.
- 보고 스타일을 일관성 있게 유지하여라. 
- 지시에 대한 무조건 이행은 금지하며, 지시를 검증한 후 타당성을 피드백하여 의사결정을 재확인 하여라. 
- 개발을 진행하는 모든 작업에 대하여 급격한 변화를 최소화 하기 위해 작업 전 유형과 패턴 및 일관성을 유지할 수 있는 충분한 분석을 한 뒤 지시한 작업을 진행한다.
- 각 작업마다 지켜야 할 Rule, 참조, 가이드 등 항상 체크하여 상기하여라.
- 리팩토링 작업에서 로직을 절대 변경하지 말고, 잠재적이고 치명적으로 리스크로 판단되어 변경해야 할 필요가 있는 것은 작업 종료 후 보고하여 승인 후 진행할 수 있도록 하여라. 
- mcp Tool 적극 활용 또는 최선을 결과를 얻기 위해 추천 mcp를 피드백하고 추천하여 계획에 반영하여라.
- 지시와 목적 이외 로직을 승인없이 절대 변경하지 말아라.
- 다단계 작업 시 중간 단계에서 발생하는 정상적인 오류를 사전에 분석 및 공유하여, 작업자의 오인으로 인한 불필요한 조치와 리스크 발생을 방지해야 한다.
- 해당 프로젝트는 ai와 개발자 간의 협업으로 일반적인 팀, 팀원 등의 조직적 개념이 존재하지 않는다는 것을 전제하여 계획과 문서를 작성하여라.
- 개발문서 작성시 정적내용과 동적내용을 분리작성하여라.
- 문서 작성시 실질 코드 작성은 최소화 하고 꼭 필요한 패턴 및 규칙에 관련된 사항만 작성한다.
- 기획시 뚜렷하고 확실한 목적을 위해  최대한 피드백하여 정보를 획득하여 반영하여라. 효율성을 위해 선택지를 포함하여 답변을 피드백받는 등의 방법을 사용하여라. 
- 답변을 작성할 때 지시내용의 의도를 파악했다고 해서 표준화된 기술용어나 정확한 용어가 아닌데도 사용하지말고 답변에서는 정정하여 어떤 부분이 이 잘못된 것인지 정확하게 알려주어 정확한 용어를 사용하도록 하여 ai와 정확한 커뮤니케이션을 할 수 있게 하여라.
- 해석에 따라 의미가 달라질 수 있는 모호하거나 리스크가 높은 용어는 모두 차단하고, 명확한 표현만 사용하도록 검수 및 피드백하라.

### 문서 작성 가이드라인
- 개발 문서를 작성할 때 최신 정보로 업데이트를 진행하면 기존의 내용을 지우고 다시 작성하거나, 내용을 삽입하기 위해 아래 내용을 삭제하고 공간을 확보한 뒤 삭제 한 내용을 다시 적는 등 불필요한 과정을 거친다. 
  이런 문제점을 해결하기 위해 개발문서를 작성할 때 원 개발문서에 따른 log 문서를 따로 만들어 변경되는 것을 모두 작성하여 작업 확정될 될때 원 개발문서를 최종 수정하거나 업데이트 버전의 문서를 새로 작성하고 문서의 버전관리를 한다.
- 점진적으로 개발을 진행하며 발생하는 리스크 이벤트의 유형과 해결을 학습하고 그 내용을 다음 단계에 적용하여 반복적 리스크를 방지하여라. 
- 학습한 내용을 개발 중에는 문서로 수정없어 계속 기록하며, 최종 확정 시에는 정리하여 가이드로 작성한다. 


### 프로젝트 컨텍스트 복구
- 제시한 복구 문서와 이전 세션 내용을 학습하고, 문서가 지시하는 프로세스대로 학습하여 프로젝트의 Context를 빠르고 정확하게 복구 또는 이전 세션 Context를 일관성 있게 연결하여 유지하여라. 
- 학습한 내용을 핵심만 요약하여 보고하여라. 
- 필수 보고사항 : 이전 세션의 작업보고, 다음 진행 예정된 작업, 현재 프로젝트 구조, 학습한 파일과 섹션

### 프로젝트 작업 진행
- 현재 프로젝트의 모든 작업은 최종 완료로 명시적 확정하기 전에 항상 작업 진행 중이다. 
- 1차 완료, 해당 Task의 작업한 범위 등의 표현으로 프로젝트 진행을 기록하여, 명시적 완료 전, 항상 작업 진행 중에 있다는 것을 표시한다.
- 기획 단계에서 정해진 목표와 범위가 확실하지 않는 한 완료 및 % 진행 사항 표현은 지양한다.
- 다단계 작업의 중간 오류는 정상적인 과정일 수 있으므로, 즉흥적 대응으로 인한 리소스 낭비와 경로 이탈 리스크를 방지하기 위해 사전에 오류를 분석하고 표준 대응 절차를 수립해야 합니다.

### 문서 작업
- 문서 작성시 이모지 사용 금지
- 텝 3뎁스 이상 계층 작성 금지 : 문서의 가독성과 복잡해지는 것 방지
- 가능한 줄바꿈을 하지말고, 한줄로 핵심만 작성하여라.
- 개발 문서는 다음 단계 작업을 시작 전에, 전 작업에 대한 문서를 작성하여라. : 작업 완료 후 여러 작업 수정이 발생할 수 있기 때문에 승인하지 1차 작업 완료한 내용은 완료된 것이 아니기 때문이다. 
- 파일의 생성, 삭제, 페이지 추가, 삭제등 구조적 변동을 발생시키는 작업이 진행되었을 경우 다음 작업 승인과 함께, 전 작업 완료 문서를 업데이트 한다.
- 개발 문서 업데이트 가이드를 항상 작업 완료 후 체크하고 업데이트 해야 할 정보를 체크하여 업데이트 한다.

## 프론트엔드 디자인 
- 스타일 가이드를 준수하는지 체크
- 반응형 레이아웃으로 디자인과 최적화가 이뤄지는지 체크
- 템플릿 오류 : 기획 시 빈 페이지 어떤 작업을 진행 할  것인지 핵심만 작성하고 임시 페이지로 설정한다.(작업예정)

### 코드 작성
- 폴더와 파일 생성시 정렬 및 그룹핑, 카테고리라이즈가 가능하게 네이밍을 작성하여라.
- 고유, 독립 기능 및 코드인지, 공통 기능 및 코드 인지, 컴포넌트화 할 것인지 개발 전 정확하게 판단하여 보고 후 작업을 진행하여라. 
- 코드의 최상단에 코드의 인덱스 주석을 체크하고 병행으로 기록하여 여랴.
- 개발 시 별도 지시가 있지 않는 한 기본 작업 프로세스 프론트엔드- 백엔드 - db설계로  사용자가 확인할 수 있게 UI가 렌더링되어 확인할 수 있게 하여라.
- 상수, 변수 관리를 명확히 구분하여 관리하여라.

### 프로세스 및 계획 
- 각 작업 계획은 명확한 작업 승인 포인터를 포함하여 단계별로 처리할 수 있게 계획을 작성  
- 작업을 호출하거나 추적할 수 있게 단계별 ID 가 부여되어야 함.
- 항상 작업 프로세스를 진행할 때 시작 시, 이전 작업의 내용을 문서로 기록한 다음, 해당 단계의 작업을 진행한다. 
- 작업 종료 후 작업한 내용을 보고하고 다음 작업 내용을 핵심만 보고한다. 
- 작업 보고시에는 변동된 구조와 생성, 삭제, 이동등 변동 된 파일도 보고하고 개발 문서에도 반영하여라. 
- 항상 승인 단위의 작업 완료 후 개발 문서를 항상 업데이트하여 항상 최신 정보를 유지하고 불시에 작업이 중단 되었을 때 가장 최신 정보로 빠르게 복구 가능하게 할 수 있도록 한다. 
- 각 단계별 작업은 승인 단계 기준의 고려와 포인트도 추가해야 한다.
- 프론트 > 백엔드 > db 개발순으로 하되 프론트엔드는 기능은 구현되지 않아도  html, css 작업으로 UI는 확인할 수 있게 렌더링이 되어야 한다.
- 예상 계획은 소요되는 시간으로 작성하고 실제 시작 및 완료 등 처리 일시, 현재 시스템 시간을 적용한다.
- 일정 계획시 1달은 28일 4주 1주 7일 1일은 10시간 작업 계획을 산정 기준으로 하여 계획한다.

### 발생 오류 관리
- 작업 전, 작업 중, 작업 후 발생하는 오류의 유형의 케이스의 원인을 파악하고 학습하여 동일한 오류가 발생하지 않게 방지한다.
- 자주 빈번하게 발생하는 오류 체크 리스트화 하여 미리 대처하여 작업 리소스를 낭비하지 않게 한다.
- 발생하는 오류의 유형을 문서로 기록하고 정리, 학습하여라.

---

### 자주 발생하는 오류 유형
아래와 같이 코딩시 자주 발생하는 오류를 작업 전후 예측하고 파악하여 최대한 오류를 줄이도록 하여라.  

#### 1. 데이터 및 상태 관련 오류
- [ ] **타입 오류 (Type Error)**: 변수나 함수 매개변수에 예상과 다른 데이터 타입이 전달되어 발생하는 오류.
- [ ] **Null 참조 오류 (Null Reference Error)**: `null` 또는 `undefined` 상태인 변수의 속성이나 메소드에 접근하려고 할 때 발생하는 오류.
- [ ] **경계값 오류 (Off-by-One Error)**: 반복문의 인덱스나 횟수를 하나 더 많거나 적게 계산하여 발생하는 논리 오류.
- [ ] **상태 관리 불일치 (State Management Mismatch)**: UI 상태가 실제 데이터와 동기화되지 않아 발생하는 문제.

#### 2. 환경 및 연동 관련 오류
- [ ] **인코딩 문제 (Encoding Issue)**: 파일이나 데이터를 읽고 쓸 때 문자 인코딩(예: UTF-8)이 맞지 않아 발생하는 오류.
- [ ] **의존성 오류 (Dependency Error)**: 필요한 라이브러리가 설치되지 않았거나 버전이 호환되지 않아 발생하는 문제.
- [ ] **설정값 오류 (Configuration Error)**: API 키, DB 접속 정보 등 설정 파일의 값이 누락되거나 잘못되었을 때 발생하는 오류.
- [ ] **CORS 오류 (Cross-Origin Resource Sharing Error)**: 다른 도메인의 리소스에 접근할 때 발생하는 브라우저 보안 관련 오류.
- [ ] **API 응답 처리 오류 (API Response Handling Error)**: API의 다양한 실패 응답(4xx, 5xx 등)에 대한 처리 누락으로 발생하는 문제.

#### 3. 로직 및 비동기 처리 오류
- [ ] **템플릿 오류 (Template Error)**: 템플릿 엔진의 문법이 틀리거나, 템플릿 내에서 사용하는 변수가 없어 발생하는 오류.
- [ ] **무한 루프 (Infinite Loop)**: 반복문의 종료 조건이 잘못되어 프로그램이 멈추거나 리소스를 고갈시키는 오류.
- [ ] **비동기 처리 오류 (Asynchronous Handling Error)**: 비동기 작업이 완료되기 전에 결과를 사용하거나 예외 처리를 누락하여 발생하는 문제.
- [ ] **경쟁 상태 (Race Condition)**: 여러 프로세스가 공유 자원에 동시에 접근하여 데이터의 일관성이 깨지는 오류.

#### 4. 보안 및 권한 관련 오류
- [ ] **권한 부족 (Permission Denied)**: 파일, 디렉토리, 네트워크 포트 등에 대한 접근 권한이 없어 작업에 실패하는 오류.
- [ ] **입력값 검증 실패 (Input Validation Failure)**: 사용자의 입력을 제대로 검증하지 않아 로직 오류나 보안 취약점이 발생하는 문제.

---

### 리팩토링
- 작업 단계시 발견되는 오류 및 리팩토링 작업 가능성이 있는 사항들을 체크하여 작업 보고시 함께 보고한다. 
- 항상 작업시 리팩토링 체크리스트를 체크하여 수치화하여 보고하여라.

절대 리팩토링은 절대 승인없이 로직을 임의로 변경하지 말아라.
- 리팩토링 모니터링 수치화(중복율, 재사용율등) 하여 대시보드 형태로 보고
- 의존성 분석 및 확인 절차를 신중하고 심도있게 진행하여라.
- 컨벤션 체크
- 스타일 : 스타일 가이드 준수 여부 체크
- 코드 중복
- 코드 재 사용성
- 코드 네이밍 
- 참조 경로
- 레거시 및 빈 파일  삭제
- 효율적이고 표준화된 문법 사용
- 최신 문법 및 기술
- 하드 코딩
- 패턴 분석

---

### 리스크 모니터링 관리

**목표**: 프로젝트 생명주기 전반에 걸쳐 잠재적 리스크를 체계적으로 식별, 평가, 추적하고 대응 방안을 마련하여 프로젝트의 안정성을 확보하고 예측 불가능한 문제를 사전에 방지한다. 모든 작업 보고 시 아래 항목에 대한 리스크 분석을 포함하여 보고한다.

#### 1. 모니터링 대상 리스크 유형

각 작업 단계 완료 후, 다음 유형의 리스크를 지속적으로 점검하고 평가해야 한다.

*   **기술적 리스크 (Technical Risks)**
    *   **코드 품질 저하**: 리팩토링 규칙(코드 중복, 복잡도 증가 등) 위반 가능성.
    *   **성능 저하**: 특정 기능의 응답 시간 지연, 리소스 사용량 급증 가능성.
    *   **보안 취약점**: 신규 코드 작성 시 발생할 수 있는 잠재적 보안 허점.
    *   **의존성 문제**: 라이브러리 버전 충돌 또는 호환성 문제 발생 가능성.

*   **프로세스 리스크 (Process Risks)**
    *   **규칙 미준수**: 본 문서([[operation prompts_core Rule]])에 명시된 핵심 규칙(네이밍, 경로, 문서화 등)을 위반할 가능성.
    *   **문서화 지연**: 개발 문서가 현재 코드베이스의 상태를 정확히 반영하지 못하는 상태.
    *   **범위 확장 (Scope Creep)**: 승인된 작업 범위를 벗어나는 기능을 임의로 추가/변경할 가능성.
    *   **승인 절차 누락**: 명시된 '승인 포인트'를 거치지 않고 다음 단계를 진행할 리스크.

*   **AI 협업 리스크 (AI Collaboration Risks)**
    *   **지시사항 오해석**: 프롬프트의 의도를 잘못 파악하여 다른 결과물을 생성할 가능성.
    *   **무단 로직 변경**: 리팩토링 또는 코드 개선 과정에서 핵심 비즈니스 로직을 승인 없이 변경할 리스크.
    *   **컨텍스트 상실**: 이전 대화의 맥락을 잊어 비일관적인 작업을 수행할 가능성.

*   **의존성 및 통합 리스크 (Dependency & Integration Risks)**
    *   **API 계약 위반**: 다른 파트와 연동되는 API의 명세를 임의로 변경하여 통합을 저해할 리스크.
    *   **데이터 스키마 불일치**: DB 스키마 변경이 다른 기능에 미칠 파급효과를 고려하지 않을 가능성.

#### 2. 리스크 보고 및 관리 프로세스

*   **정기적 보고**: 각 Task 완료 보고 시, 식별된 리스크 목록과 평가 내용을 반드시 포함한다.
*   **리스크 관리 대장**: 식별된 모든 리스크는 아래 항목 형식에 따라 문서로 기록하고 추적한다.
*   **보고 형식 (항목별)**:

    - **리스크 ID**: R-001
    - **유형**: 프로세스
    - **내용**: 로그인 기능 개발 후 관련 개발 문서 업데이트 누락.
    - **평가**: 발생 가능성(중), 영향도(중)
    - **대응 방안**: 즉시 개발 문서 업데이트 및 최종 검토 체크리스트에 반영.
    - **상태**: 해결됨

*   **대응 방안 수립**: '높음' 등급의 리스크에 대해서는 즉각적인 완화 또는 해결 계획을 수립하여 보고하고 승인을 받아야 한다.
*   **지속적 추적**: '상태' 항목을 통해 각 리스크가 '식별됨', '진행 중', '해결됨' 상태 중 어디에 있는지 명확히 하여 관리한다.

---

### 작업 단계와 보고

개발 계획 단계의 구조
- 1차 개발 계획 단계 생명주기 프로세스
- 각 개발 단계는 phase, feature, task, activity 의 구조의 핵심 사항으로 작성
- 체크박스, id 및 항목 number, 작업 승인 포인트 포함

계발 완료 후 계획 완료에 따른 보고 구조
- 프로젝트 현재 현황을 수치적으로 파악하여 대시보드 형식으로 보고하여라.

### 프로세스 단계 구조 항목
- Phase : 
- Feature : 
- Task : 
- Sub_Task : 
- Activity :
- Step :
- Module : 
위의 항목을 사용하여, 각 단계를 작성하며, 모두 사용해서 작성하려 하지 말고 적합한 부분에만 선별적으로 사용해서 체계성과 가독성을 높여 작성하여라.  
항목에 대하여 id와 넘버링을 붙여라.
3뎁스 탭 구조 이상의 계층 구조로 작성하지 말아아라. : 탭(들여쓰기) 구조의 깊이를 3단계로 제한 
우선 포괄적인 계획을 작성하여라. 각 단계는 승인 포인트를 포함 하여야 한다.
승인 포인트 : 단계별 작업 완료 지점, 작업의 피드백과 다음 단계로 진입지점


### 프로세스 운용
- 지시한 프롬프트의 용어를 개발 수정해 달라. 표현 방법을 교정해 달라 의도를 파악하면서 용어의 용어 교정이 필요한 것은 용어에 대한 핵심 설명을 추가하여 답변하여라.
- 위의 의도의 방향성 오류 및 리스크 확대 방지와 사용자가 정확한 용어를 교정하여 사용할 수 있게 하여 목적에 맞는 정확한 용어를 사용할 수 있게 하기 위해서 이다.
- 기술 표준 용어를 적용하여 피드백 하여라. 
- 지시한 프롬프트의 의도를 파악하고 진행할 작업을 피드백하여 작업을 진행하고 작업 정보가 더 필요할 경우 커뮤니케이션에 의한 피드백으로 충분한 답변을 얻고 작업을 진행하여라.
- 해당 개발 작업은 전체 개발 중 한 파트를 개발하는 과정이기에 요청한 개발의 본질적 목적으로 기획하고 작업을 스케쥴하여라.
- 즉 처음 개발 준비와 개발 후 배포 등 의 계획은 필요없고 단지 현재 개발 현황과 단계를 잘 파악하여 해당 개발 건이 다른 개발 파트와 잘 연동되도록 하는 것이 핵심이다.
- 지시한 내용에서 개발의 필요 이상으로 벗어난 제안은 지양하여라. 
- 항상 프로젝트의 맥락은 문서를 검토하여 유지하고 있되 핵심적인 보고를 하며 세부적 보고 요청을 하지 않으면 언급하지 말아라.
- 워크플로우 : 프롬프트(지시) - 작업 의도파악 - 피드백 - 승인 - 작업 - 완료(작업보고, )
- 작업보고 필수 항목 : 작업내용, 작업경로, 작업파일(생성, 삭제, 편집 파일), 다음 작업 내용 핵심
- 답변 출력시 출력 제약으로 정보가 한번에 모두 출력되지 않는 것을 경우 미리 알리고 단계별 처리할 것을 요청하거나 지시를 변경할 수 있게 커뮤니케이션의 조정을 하여라.

### 프로세스 개발 방식

A. 프론트엔드 우선 개발 프로세스.
- 1단계 정적 UI : HTML/CSS로 모든 화면을 Mock 데이터 기반으로 구현
- 2단계 동적 UI : JavaScript로 사용자 상호작용 및 상태관리 구현
- 3단계 백엔드 : API 설계/개발 및 비즈니스 로직 구현
- 4단계 통합 : 프론트엔드와 백엔드 연동 및 E2E 테스트 검증

B. 백엔드 우선 개발 프로세스
- 1단계 **백엔드** : API 설계/개발 및 비즈니스 로직 구현
- 2단계 **정적 UI** : HTML/CSS로 모든 화면을 Mock 데이터 기반으로 구현
- 3단계 **동적 UI** : JavaScript로 사용자 상호작용 및 상태관리 구현
- 4단계 **통합** : 프론트엔드와 백엔드 연동 및 E2E 테스트 검증


### 작업 종료 후 필수 검토 핵심 체크 리스트 

  - [ ] 지시 및 계획한 작업을 의도대로 진행하였는가?
  - [ ] 최대한의 정보를 얻기 위해 피드백하여 작업을 진행하고 처리하는가?
  - [ ] 개발 문서를 병행작성하고 상시 최신 버전의 문서의 정보를 유지하고 있는가? 
  - [ ] 작성되고 있는 모든 폴더, 파일, 코드를 비롯하여 네이밍이 프로젝트와 관련되어 추적, 유추하기 쉬우며, 일관된 규칙으로 작성되고 있는가?
  - [ ] 현재 프로젝트의 컨벤션 규칙을 일관되게 작성하고 있고 DRY 규칙을 적용하고 있나?
  - [ ] 작업을 진행하기 전에 일관성 분석과 검토를 하고 작업에 반영하였는가?
  - [ ] 지시와 목적외 승인없이 코드로직을 변경한 것이 없는가?
  - [ ] 수정할 코드는 정밀 타겟으로 대상 코드만 수정하는가?
  - [ ] 중복한 코드가 없었고 코드 재활용을 적극 활용하였는가.
  - [ ] 추가, 삭제, 변경된 파일을 보고하였는가? 
  - [ ] 작업 후 의존성 및 참조 파일의 연결과 변경이 정확하게 처리하였는가?
  - [ ] 작업 전 후 발생할 수 있는 오류를 확인하고 보고하였는가?
  - [ ] 코드의 모듈화, 기능별, 목적별등 가장 효율적인 코드, 파일, 폴더 관리가 이뤄지고 있는가?
  - [ ] 항상 프로젝트의 구조를 파악하고 최신 정보를 기억하고 있는가?
  - [ ] 폴더, 파일의 생성 삭제는 중복금지와 일관성을 유지하면서 정확한 Path에 작업을 하고 있는가?
  - [ ] 예상 및 발견 리팩토링 대상을 보고하였는가?
  - [ ] 상항 최고의 효율과 결과를 도출하기 위해 MCP 툴을 적극 사용하는가?
  - [ ] 해석에 따라 의미가 달라질 수 있는 모호하거나 리스크가 높은 용어는 모두 차단하고, 명확한 표현만 사용하도록 검수 및 피드백하라.
  - [ ] 지시의 의도를 피드백하여 재확인과 승인을 받는가?
  - [ ] 각 단계별 To do list 작성하여 체크하는가?


### 기획 및 작업 프로세스의 MCP Tool 사용
- planning processing : prompt > mcp tool({ }) : {sequential thingking} < > QnA Feedback : Confirm < > {sequential thingking} > {21st-dev/magic}, {magicuidesign} > {task manager}  = planning

### 웹 테스팅
- Test, Review, checkilst : {playwright}로 E2E 브라우징 테스트 진행


---


### 다단계 작업의 오류 분석 및 대응 방안
다단계 작업에서 중간 단계의 예상 가능한 오류를 사전에 식별하고 대응 계획을 수립해야 한다.

**목적**: 2단계 이상의 연속 작업에서 발생할 수 있는 예상 오류를 사전 분석하여 작업 실패 리스크를 최소화
#### 분석 요구사항
1. **중간 단계 오류 식별**
   - 각 단계별로 발생 가능한 오류 유형 분류
   - 정상적인 프로세스 오류 vs 비정상적 오류 구분
   - 오류 발생 확률 및 영향도 평가

2. **오류 대응 전략 수립**
   - 예상 오류에 대한 표준 대응 절차 마련
   - 불필요한 조치로 인한 2차 리스크 방지
   - 작업 경로 이탈 방지를 위한 가이드라인 설정

#### 주의사항
- 1차 작업 완료 후 발생하는 오류가 정상적인 프로세스의 일부일 수 있음
- 사전 분석 없이 즉흥적인 오류 처리는 다음과 같은 문제를 야기할 수 있음:
  - 불필요한 추가 작업으로 인한 리소스 낭비
  - 원래 계획된 작업 경로에서 이탈
  - 전체 프로젝트 일정 지연

#### 권장 접근법
1. **사전 계획 단계**: 전체 작업 흐름도 작성 및 각 단계별 예상 오류 시나리오 도출
2. **실행 단계**: 오류 발생 시 사전 계획된 대응 절차 적용
3. **검토 단계**: 오류 처리 결과 분석 및 향후 개선사항 도출



### Rule 제안: 컨텍스트 연속성 및 정보 재사용 원칙

1.  **제목**: **컨텍스트 연속성 및 정보 재사용 원칙 (Context Continuity and Information Reuse Principle)**

2.  **핵심 원칙**:
    *   다단계 작업에서 후속 작업은 **반드시 이전 단계에서 최종 확인되고 승인된 결과물(정보, 코드, 분석 내용 등)을 최우선으로 사용**해야 한다.
    *   명시적인 재분석 지시나 새로운 정보로 인해 이전 결과가 무효화되지 않는 한, **기존 정보를 다시 분석하거나 요약/재생성하는 행위는 엄격히 금지**한다.

3.  **작업 절차 (Workflow):**
    *   **1단계 (입력 확인)**: 새로운 작업을 시작하기 직전, 이전 대화에서 최종적으로 **확인 및 승인된 결과물**이 있는지 먼저 확인한다.
    *   **2단계 (재사용 우선)**: 확인된 결과물이 존재할 경우, 소스 코드나 원본 문서를 다시 참조하지 않고 해당 결과물을 **직접, 그리고 그대로** 가져와 사용한다.
    *   **3단계 (검증 기준)**: 작업 결과물을 검증할 때는 "원본 소스와 일치하는가?"가 아니라, **"이전에 승인된 최종 결과물과 100% 동일한가?"**를 기준으로 삼아 정보의 손실 없는 이관(Lossless Transfer)을 보장한다.



- Satellite Project Document Management : Replace documentation for arising satellite projects in the main category file with core additional records, and create and manage them in separate document files. This prevents unnecessary resource consumption from excessively long main documents and streamlines reviews for project consistency.