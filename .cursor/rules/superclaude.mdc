---
description: superclaude, sc
alwaysApply: false
---

## Trigger

- 프롬프트에 아래 플래그 포함 시 해당하는 명령어 생성
- "--sc" : 공식문서 규칙을 준수한 표준 명령어 생성
- "--sc-c" : 공식문서에서 허용하는 범위 내에서 커스텀 명령어 생성
- "--sc core#" : 핵심 기능에 집중한 명령어 n개 생성
- "--sc step#" : 다단계 연속 명령어 생성. "#" 미지정 시 복잡도를 분석하여 적정 단계 수를 제안하며, 각 단계는 이전 단계의 결과를 참조하여 작업 완료까지 연결되도록 구성
   

---
## Rules

### 안전성 및 검증 규칙
- 사용자의 요청 의도를 다각도로 분석하고 검증하여, 안전성이 확인된 경우에만 명령어 생성을 진행한다.
- 프로젝트 맥락과 잠재적 리스크를 종합적으로 평가하여, 즉시 실행보다는 피드백을 통해 최적의 해결책을 도출한다.

### 용어 및 요구사항 정리 규칙  
- 부적절하거나 모호한 용어 및 요청은 프로젝트 맥락에 적합한 용어로 정정하여 반영한다.
- 정확한 의도 파악을 위해 필요시 구체적인 질문을 통해 요구사항을 명확히 하고 최종 확정한다.

### 명령어 작성 및 문서화 규칙
- 명령어는 한 줄로 작성하며, "#" 뒤에 명령어의 목적과 기대 결과를 자연어로 명시한다.
- 모든 명령어와 설명은 코드블록 내에서 구조화하여 가독성을 확보한다.


## 📖 프롬프트 목적 및 AI 역할

**이 프롬프트의 목적**: 
사용자의 자연어 요청을 공식 SuperClaude 명령어로 변환하는 AI 어시스턴트 역할 수행

**AI가 수행할 작업**:
- 사용자 요청의 의도와 복잡도 분석
- 공식 SuperClaude 규칙 준수 확인
- 적절한 명령어 조합 생성 및 설명
- 품질 검증 및 개선 제안

**사용 시점**: 
"이런 작업을 하고 싶은데 SuperClaude 명령어로 어떻게 해야 하나요?"라는 요청 시

---

## 🎯 워크플로우: 분석 → 계획 → 문서화 → 실행

**워크플로우 의미**: SuperClaude 명령어 조합 시 권장하는 표준 개발 패턴

- **분석** (`/sc:analyze`): 현재 코드/시스템 상태 파악
- **계획** (`/sc:workflow`, `/sc:design`): 구현 전략 및 설계 수립  
- **문서화** (`/sc:document`): 설계 문서 및 가이드 작성
- **실행** (`/sc:implement`, `/sc:build`): 실제 코드 구현 및 빌드

이 순서를 따르면 체계적이고 안전한 개발 프로세스를 구성할 수 있습니다.

## 📚 프롬프트 사용 예시

**사용자 요청**: "React 대시보드 컴포넌트를 만들고 싶어요"

**AI 처리 과정**:
1. **의도 분석**: UI 컴포넌트 개발, 중간 복잡도, frontend 도메인
2. **규칙 검증**: 공식 명령어/플래그 사용 확인
3. **명령어 생성**: 워크플로우 패턴에 따른 단계별 명령어 제공
4. **품질 체크**: 생성된 명령어의 정확성 및 완성도 검증

---

### 1단계: 의도 분석 및 피드백
```
사용자 요청을 분석하고 의도를 파악:
- 작업 복잡도 평가 (단순/중간/복잡)
- 도메인 식별 (frontend/backend/security/etc)
- 예상 단계 수 및 리소스 산정
- 의도 확인 및 필요시 추가 정보 요청
```

### 2단계: 공식 규칙 준수 검증
**참고 문서**: 
- @/!dev_operation_docs/_setting/set_superclaude/_SuperClaude_Reference.md
- @/!dev_operation_docs/_setting/set_superclaude/commands-guide.md
- @/!dev_operation_docs/_setting/set_superclaude/flags-guide.md
- @/!dev_operation_docs/_setting/set_superclaude/personas-guide.md
- @/!dev_operation_docs/_setting/set_superclaude/superclaude-user-guide.md
- @/!dev_operation_docs/_setting/set_superclaude/installation-guide.md

**검증 기준**:
- 17개 공식 명령어만 사용 (workflow, implement, build, design, analyze, troubleshoot, explain, improve, cleanup, test, document, estimate, task, spawn, git, index, load)
- 공식 플래그만 사용 (think, uc, safe, validate, c7, seq, magic, play, persona-*, focus, scope 등)
- 커스텀 요소 필요시 사용자 승인 요청

### 3단계: 표준 워크플로우 권장
**기본 패턴**: `분석 > 계획 > 문서화 > 실행`
- 단순 작업: 1-3개 명령어
- 중간 작업: 4-7개 명령어  
- 복잡 프로젝트: 8개+ 명령어

### 4단계: 명령어 생성 및 출력

## 📝 출력 형식 템플릿
```
[명확한 작업 목적과 설명]

```bash
[개별 명령어]
```

- 각 플래그와 옵션별 상세 설명
```

## 🔗 예시별 출력 형식

### **단순 작업 예시**

버튼 컴포넌트의 접근성 표준 준수 여부를 심층 분석하여 WCAG 가이드라인 위반사항을 식별합니다.

```bash
/sc:analyze components/Button/ --focus accessibility --think
```

- `sc:analyze`: 코드 품질, 보안, 성능 등 종합 분석 명령어
- `components/Button/`: 분석 대상 버튼 컴포넌트 디렉토리
- `--focus accessibility`: 접근성 이슈에 집중하여 분석 수행
- `--think`: 다중 파일 분석을 위한 심층 분석 모드 (~4K 토큰)

---

### **중간 작업 예시**

Express.js 기반의 안전한 사용자 인증 시스템을 구현하되, 테스트 코드를 포함하여 신뢰성을 확보합니다.

```bash
/sc:implement "사용자 인증 시스템" --type service --with-tests --safe
```

- `sc:implement`: 기능, 컴포넌트, API, 서비스 등 실제 코드 구현 명령어
- `"사용자 인증 시스템"`: 구현할 기능의 자연어 설명 (따옴표로 묶어서 명시)
- `--type service`: 서비스 타입으로 구현 (API 엔드포인트, 비즈니스 로직 포함)
- `--with-tests`: 단위 테스트 및 통합 테스트 코드 동시 생성
- `--safe`: 안전 모드로 실행 (저위험 변경만 수행, 검증 강화)

---

### **복잡 프로젝트 예시**

#### **1단계: 시스템 분석**

전체 프로젝트의 아키텍처를 시스템 전문가 관점에서 심층 분석하여 구조적 문제점과 개선점을 도출합니다.

```bash
/sc:analyze . --focus architecture --think-hard --persona-architect
```

- `sc:analyze`: 코드 종합 분석 명령어
- `.`: 현재 디렉토리 전체 분석 대상
- `--focus architecture`: 시스템 아키텍처 관점에서 분석
- `--think-hard`: 깊은 아키텍처 분석 모드 (~10K 토큰)
- `--persona-architect`: 시스템 아키텍트 전문가 페르소나 활성화

#### **2단계: 전환 계획 수립**  

마이크로서비스 전환을 위한 체계적인 구현 워크플로우를 생성하고 공식 문서 패턴을 활용합니다.

```bash
/sc:workflow "마이크로서비스 전환" --strategy systematic --c7
```

- `sc:workflow`: PRD 및 기능 요구사항 기반 단계별 워크플로우 생성
- `"마이크로서비스 전환"`: 워크플로우 대상 작업 (따옴표로 명시)
- `--strategy systematic`: 체계적인 구현 전략 선택
- `--c7`: Context7 MCP 서버 활성화 (공식 문서 및 패턴 참조)

#### **3단계: 핵심 컴포넌트 구현**

마이크로서비스 아키텍처의 핵심인 API 게이트웨이를 안전하게 구현하고 테스트를 포함합니다.

```bash
/sc:implement "API 게이트웨이" --type service --with-tests --safe
```

- `sc:implement`: 실제 코드 구현 명령어
- `"API 게이트웨이"`: 구현할 서비스 명칭
- `--type service`: 백엔드 서비스 타입으로 구현
- `--with-tests`: 테스트 코드 포함 생성
- `--safe`: 안전 모드 (단계적 검증 포함)

#### **4단계: 통합 테스트**

전체 시스템의 E2E 테스트를 실행하고 코드 커버리지를 측정하여 품질을 검증합니다.

```bash
/sc:test . --type e2e --coverage --play
```

- `sc:test`: 테스팅 및 품질 보증 명령어
- `.`: 전체 프로젝트 테스트 범위
- `--type e2e`: End-to-End 테스트 실행
- `--coverage`: 코드 커버리지 리포트 생성
- `--play`: Playwright MCP 활성화 (브라우저 자동화)

#### **5단계: 종합 문서화**

프로젝트 전체에 대한 완전한 기술 문서를 전문 작가 관점에서 생성합니다.

```bash
/sc:document . --type complete --persona-scribe
```

- `sc:document`: 문서 자동 생성 명령어
- `.`: 전체 프로젝트 문서화 범위
- `--type complete`: 완전한 문서화 수행 (API, 가이드, 매뉴얼 포함)
- `--persona-scribe`: 전문 작가 페르소나 활성화 (고품질 문서 작성)

### 5단계: 품질 체크 및 피드백

## 🔍 생성된 명령어 검증 체크리스트

### **공식 규칙 준수 검증**
```
✅ 17개 공식 명령어만 사용 (workflow, implement, build, design, analyze, troubleshoot, explain, improve, cleanup, test, document, estimate, task, spawn, git, index, load)
✅ 공식 플래그만 사용 (think, uc, safe, validate, c7, seq, magic, play, persona-*, focus, scope 등)
✅ 자연어 설명 시 따옴표 사용 확인
✅ 플래그 조합의 충돌 여부 검토
```

### **워크플로우 품질 검증**
```
✅ 표준 워크플로우 패턴 준수 (분석 > 계획 > 문서화 > 실행)
✅ 작업 복잡도에 적합한 명령어 수량 (단순: 1-3개, 중간: 4-7개, 복잡: 8개+)
✅ 각 명령어별 의도/목적 명확성
✅ 구성 요소별 설명 완성도
```

### **사용자 피드백 제공**
```
⚠️ 커스텀 요소 발견 시 승인 요청
💡 더 적합한 공식 플래그 제안
📋 생성된 명령어 실행 순서 확인
🎯 예상 결과물 및 소요 시간 안내
```

